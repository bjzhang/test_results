# Invocation command line:
# /home/bamvor/CPU2006/bin/runspec -c linaro_aarch64.cfg --nobuild --size=ref -n 1 --noreportable --tune=base perlbench bzip2 mcf gobmk sjeng libquantum h264ref xalancbmk
# output_root was not used for this run
############################################################################
###############################################################################
# Configuration for benchmarking at Linaro
# THIS FILE SHOULD BE KEPT IN SYNC WITH THE EQUIVALENT FILE FOR CPU2000
###############################################################################

#Use @...@ for substitutions you're unlikely to want to twiddle on the CLI.
#@...@ substitutions may be substituted at build time on the target (see GNUMakefile)
#or at run time on the target (see linarobench.sh). Run-time substitutions might
#be given in the config file for the target (see abe:config/boards/bench/juno-a57.conf)
#and/or determined dynamically at set time (see linarobench.sh).
#Substitutions can be twiddled on the CLI roughly like this:
#scripts/benchmark.sh ... -a "-s HW_MODEL=SuperFandangler"

license_num	= 4114

#In principle we could use Doc/sysinfo to get the target information at run
#time. But even the latest version of this program does not support ARM, and
#this is counter to our static target specification model (e.g. it's not
#clear how such a program would know what we were targeting on a b.L system).
sysinfo_program =

hw_model        = Hikey
hw_cpu          = Cortex-A53
hw_fpu          = fp_asimd
#sw_os           = 4.9.0-11355-g0be50176d4bb
sw_os           = 4.10.0-rc2-00109-ge02003b

ext             = aarch64

sw_compiler	= Using built-in specs. COLLECT_GCC=aarch64-linux-gnu-gcc COLLECT_LTO_WRAPPER=/home/bamvor/works/software/toolchain/gcc-linaro-6.2.1-2016.11-x86_64_aarch64-linux-gnu/gcc-linaro-6.2.1-2016.11-x86_64_aarch64-linux-gnu/bin/../libexec/gcc/aarch64-linux-gnu/6.2.1/lto-wrapper Target: aarch64-linux-gnu Configured with: /home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/snapshots/gcc-linaro-6.2-2016.11/configure SHELL=/bin/bash --with-mpc=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/builds/destdir/x86_64-unknown-linux-gnu --with-mpfr=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/builds/destdir/x86_64-unknown-linux-gnu --with-gmp=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/builds/destdir/x86_64-unknown-linux-gnu --with-gnu-as --with-gnu-ld --disable-libstdcxx-pch --disable-libmudflap --with-cloog=no --with-ppl=no --with-isl=no --disable-nls --enable-c99 --enable-gnu-indirect-function --disable-multilib --with-arch=armv8-a --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419 --enable-multiarch --with-build-sysroot=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/sysroots/aarch64-linux-gnu --enable-lto --enable-linker-build-id --enable-long-long --enable-shared --with-sysroot=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/builds/destdir/x86_64-unknown-linux-gnu/aarch64-linux-gnu/libc --enable-languages=c,c++,fortran,lto --enable-checking=release --disable-bootstrap --build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu --target=aarch64-linux-gnu --prefix=/home/tcwg-buildslave/workspace/tcwg-make-release/label/docker-trusty-amd64-tcwg-build/target/aarch64-linux-gnu/_build/builds/destdir/x86_64-unknown-linux-gnu Thread model: posix gcc version 6.2.1 20161016 (Linaro GCC 6.2-2016.11)

action		= validate
tune		= base
output_format	= asc,csv,config #csv meaningless but harmless for 2000

log_timestamp	= 1

check_md5	= 1
# We set custom optimization flags for portability sake on several
# benchmarks, which is not allowed in base runs.  Specifically
# -fno-strict-aliasing and -fno-aggressive-loop-optimizations.
# We don't want to move these flags to peak as we use peak for PGO
# benchmarking.
reportable	= 0
runlist		= int fp
teeout		= yes
teerunout	= yes
makeflags	= #Only affects builds
minimize_builddirs = 1 #Keep disk usage down during builds
#minmimize_rundirs = 1 #Keep disk usage down during runs - banned in reportable
#submit		= @SUBMIT@ #I don't think this does anything, as we control this at the level of runspec's parent (actually, ancestor)
                           #TODO: We might want to generate a note about our use of taskset, as SPEC will autogen notes when submit is used.
notes_000       = Top-level shell is run with taskset, so whole benchmark suite is executed on a single core
#use_submit_for_speed = 1 #Use submit for SPECspeed runs as well as SPECrate runs
#size = test #Go quicker when testing benchmark infrastructure

default=default=default=default:
CC		= aarch64-linux-gnu-gcc
CXX		= aarch64-linux-gnu-g++
FC		= aarch64-linux-gnu-gfortran
F77		= aarch64-linux-gnu-gfortran

################################################################
# Company name
################################################################

test_sponsor	= Linaro #company_name in CPU2000, test_sponsor in CPU2006
tester		= Linaro #tester_name in CPU2000, tester in CPU2006

#####################################################################
# Optimization
#####################################################################

#Static linkage so that we can:
#1) Ensure that we are linking with the libraries that we ship
#2) Easily run AArch32 code on AArch64 targets
#-fno-common inherited from pre-version-controlled source. Thought
#to be good for performance across targets, not just on ARM.
default=default=default=default:
COPTIMIZE	= -O3 -fno-common   -static -static-libgcc
CXXOPTIMIZE	= -O3 -fno-common -static -static-libgcc
FOPTIMIZE	= -O3 -fno-common   -static -static-libgcc
F77OPTIMIZE	= -O3 -fno-common   -static -static-libgcc

default=peak=default=default:
PASS1_CFLAGS	= -fprofile-generate=$[top]/$(BENCHMARK)
PASS1_CXXFLAGS	= -fprofile-generate=$[top]/$(BENCHMARK)
PASS1_FFLAGS	= -fprofile-generate=$[top]/$(BENCHMARK)
PASS1_F77FLAGS	= -fprofile-generate=$[top]/$(BENCHMARK)
PASS1_LDFLAGS	= -fprofile-generate=$[top]/$(BENCHMARK)
PASS2_CFLAGS	= -fprofile-use=$[top]/$(BENCHMARK)
PASS2_CXXFLAGS	= -fprofile-use=$[top]/$(BENCHMARK)
PASS2_FFLAGS	= -fprofile-use=$[top]/$(BENCHMARK)
PASS2_F77FLAGS	= -fprofile-use=$[top]/$(BENCHMARK)
PASS2_LDFLAGS	= -fprofile-use=$[top]/$(BENCHMARK)
fdo_pre0        = rm -rf $[top]; mkdir -p $[top]

################################################################
# FROM HERE, EXPECT DIFFERENCES BETWEEN CPU2000 AND CPU2006    #
################################################################

################################################################
# Benchmark noise handling (via number of iterations)
################################################################

################################################################
# Portability Flags
################################################################
default=default=aarch64=default:
PORTABILITY	= -DSPEC_CPU_LP64

default=default=amd64=default:
PORTABILITY	= -DSPEC_CPU_LP64

400.perlbench=default=default=default:
CPORTABILITY	= -DSPEC_CPU_LINUX_X64 -fgnu89-inline

462.libquantum=default=default=default:
CPORTABILITY	= -DSPEC_CPU_LINUX

464.h264ref=default=default=default:
CPORTABILITY	= -fsigned-char

483.xalancbmk=default=default=default:
CXXPORTABILITY	= -DSPEC_CPU_LINUX

416.gamess=default=default=default:
FPORTABILITY	= -fno-aggressive-loop-optimizations

481.wrf=default=default=default:
CPORTABILITY	= -DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LINUX

482.sphinx3=default=default=default:
CPORTABILITY	= -fsigned-char

447.dealII:
CXXPORTABILITY	= -include cstddef -include cstring -include cstdlib




# The following section was added automatically, and contains settings that
# did not appear in the original configuration file, but were added to the
# raw file after the run.
default:
sw_peak_ptrsize = Not Applicable
